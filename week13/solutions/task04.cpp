#include <iostream>

/*
    Напишете функция `int* toSet(int* arr, int size, int& setSize)`, която приема масив `arr` с размер `size` и която връща указател към новосъздаден (динамично) масив,
    който съдържа в себе си множеството от елементите на `arr`. В променливата `setSize` да се запази размерът на новосъздадения масив.
*/

int *toSet(int *arr, int size, int &setSize)
{
    // Не сме сигурни колко точно са уникалните елементи, затова заделяме малко повече памет, отколкото потенциално ще ни трбява.
    // Алтернативно, можем първо да преброим колко на брой са уникалните елементи, за да знаем точно колко памет да заделим.
    int *result = new int[size];

    int index = 0;

    // Обхождаме всички елементи
    for (int i = 0; i < size; i++)
    {
        // Един елемент е уникален, ако досега не сме го срещали
        bool isUnique = true;
        for (int j = 0; j < i; j++)
        {
            if (arr[i] == arr[j])
                isUnique = false;
        }

        // Ако досега не сме го срещали, го добавяме в резултата
        if (isUnique)
        {
            result[index] = arr[i];
            index++;
        }
    }

    // Накрая не трябва да забравяме да променим стойността на setSize
    setSize = index;

    return result;
}

int main()
{
    int arr[] = {1, 2, 1, 3, 4, 2, 8, 8, 9};
    int setSize = 0;
    int *set = toSet(arr, 9, setSize);

    for (int i = 0; i < setSize; i++)
        std::cout << set[i] << " ";

    // Не забравяме, че винаги трябва да зачистим паметта, която сме заделили динамично.
    delete[] set;

    return 0;
}