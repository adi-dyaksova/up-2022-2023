#include <iostream>
#include <fstream>
#include <cmath>

/*
    Нека е даден файл, който съдържа информация за точки в равнината. На първия ред е записано число,
    което указва общия брой точки във файла, а на всеки следващ ред са изписани x и y координатите на всяка една точка.
    Да се напише програма, която прочита такъв файл и изчислява дължината на пътя между последователните точки.
*/

// Структура, която ще представя една точка в равнината
struct Point
{
    double x; // Всяка точка си има абсциса
    double y; // Всяка точка си има ордината

    // Член функция, която ще изчислява разстоянието между текущата точка и друга таква по познатата ни формула
    double distanceTo(Point other)
    {
        return std::sqrt(std::pow((x - other.x), 2) + std::pow((y - other.y), 2));
    }
};

// Функция, която приема масив от точки и намира разстоянието на последователния път между тях.
// Забележете, че тази функция се грижи точно за едно нещо. Не сме набутали логиката за прочитането
// на точките от входния файл в нея.
double calculateDistance(Point points[], int size)
{
    double distance = 0;

    // Обхождаме всички точки до предпоследната
    for (int i = 0; i < size - 1; i++)
    {
        // Вземаме текущата и следващата точка(затова и спираме до предпоследната при обхождането на масива)
        Point current = points[i];
        Point next = points[i + 1];

        // Прибавяме разстоянието между тях към общото
        distance += current.distanceTo(next);
    }

    return distance;
}

int main()
{

    std::ifstream file;
    file.open("points.txt"); // Отваряме файла с входните данни

    // Прочитаме колко на брой точки има в него
    int size;
    file >> size;

    // Създаваме динамично памет за точно толкова точки на брой, колкото ни трябват
    Point *points = new Point[size];

    for (int i = 0; i < size; i++)
    {
        // Четем координатите на всяка точка
        file >> points[i].x >> points[i].y;
    }

    // Извикваме функцията
    std::cout << calculateDistance(points, size) << std::endl;

    // Накрая почистваме заделените ресурси
    delete[] points;
    file.close();

    return 0;
}