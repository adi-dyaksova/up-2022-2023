#include <iostream>

// Формално казано структурите са начин за групиране на различни данни под едно общо име.
// Всъщност структурите ни позволяват да дефинираме собствени типове и да моделираме по-ефективно обекти
// от истинския свят в нашите програми.
struct Student
{
    // Всеки обект от тип студент ще си има факултетен номер и име. Това са член данните на структурата.
    int fn;
    char name[50];

    // Метод(член-функция) на структурата, който ще можем да извикваме за всяка променлива от тип Student
    void printName()
    {
        // Въпреки че функцията не приема аргументи, в тялото й имаме достъп до член данните на текущия обект
        std::cout << "The name is: " << name << std::endl;
    }
};

// Също както досега имахме функции, които приемат променливи от тип int, char, char* и т.н.,
// така можем да имаме и функция, която приема променлива от тип Student
void printName(Student s)
{
    std::cout << "The name is: " << s.name << std::endl;
}

int main()
{
    // Променливи от познатите ни типове и операции с тях
    int x = 3;
    int y = 5;
    int z = x + y;
    bool b = true;

    // Променлива от новия тип
    Student s;
    // Може да достъпваме до член данните й и да работим с тях, както сме работили с всяка променлива от познатите ни типове досега
    s.fn = 81352;
    std::cin.getline(s.name, 50);
    // Извикваме метода printName за обекта s
    s.printName();

    // Нов обект от тип Student
    Student s1;
    std::cin.getline(s1.name, 50);
    // Извикването на неговия метод printName ще доведе до различен резултат, защото член данните на s1 са различни от тези на s
    s1.printName();

    return 0;
}