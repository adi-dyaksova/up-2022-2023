#include <iostream>

/*
    Напишете функция void changeNumber(int* number), която приема като аргумент указател към цяло число
    и ако числото е четно, го променя на 0. В противен случай не променя числото.
*/

// Функция, която не работи, както бихме искали. Параметърът, който подадем, ще се копира
// и всяка промяна по него в рамките на функцията няма да се отрази по никакъв начин
// на стойността извън функцията.
void changeNumberNotWorking(int number)
{
    if (number % 2 == 0)
        number = 0;
}

// Решение на задачата с използване на референция. number е референция към нещо, с което
// ще извикаваме функцията. Параметърът, който подадем, няма да се копира, а ще работим
// директно с него. Т.е. всяка промяна в тялото на функцията ще се отрази и след изпълнението
// на функцията.
void changeNumber(int &number)
{
    if (number % 2 == 0)
        number = 0;
}

// Решение с указател. При извикване на функцията указателят, който подадем, ще се копира, но
// ще продължи да сочи към същото място в паметта. Т.е., ако променим стойността към която сочи,
// тази промяна ще бъде видима и след изпълнение на функцията.
void changeNumberPtr(int *number)
{
    if ((*number) % 2 == 0)
        *number = 0;
}

int main()
{
    int a = 4;

    changeNumber(a);

    std::cout << a << " ";

    return 0;
}